include 'disable_assets/no_assets.gin'
include 'scene_types/under_water.gin'
include 'auv/auv_camera.gin'

include 'performance/fast_terrain_assets.gin'
#include 'performance/high_quality_terrain.gin'
# include 'performance/dev.gin'
run_erosion.n_iters = [1,1]


# from dev.gin
full/render_image.min_samples = 100 #100
full/render_image.num_samples = 128 #8192

# camera selection config
#Terrain.populated_bounds = (-25, 25, -25, 25, -25, 0)
#Terrain.bounds = (-200, 200, -200, 200, -40, 10)
#OcMesher.bounds = (-40, 40, -40, 40, -30, 5) # not used on trench
UniformMesher.dimensions = (-15, 15, -15, 15, -30, 0)

export.spherical = False # use OcMesher
min_terrain_distance = 1.5
keep_cam_pose_proposal.min_terrain_distance = %min_terrain_distance
#SphericalMesher.r_min = %min_terrain_distance
#OpaqueSphericalMesher.pixels_per_cube = 0.92
TransparentSphericalMesher.pixels_per_cube = 1.8 # hifi 1.38
target_face_size.global_multiplier = 2 # use this for dev. Not sure it gets used for my assets

compose_scene.inview_distance = 12
placement.populate_all.dist_cull = 12
compose_scene.near_distance = 10
compose_scene.center_distance = 10

#execute_tasks.generate_resolution = (960, 540)
W = 2056
H = 1504
execute_tasks.generate_resolution = (%W, %H) #sirius
get_sensor_coords.H = %H
get_sensor_coords.W = %W

# Configure straight path with lower frequency frames. Based on AUV Nimbus
#animation_policy.AnimPolicyRandomForwardWalk.speed = 0.5
#animation_policy.AnimPolicyRandomForwardWalk.yaw_dist = 0
#animation_policy.AnimPolicyRandomForwardWalk.step_range = (1, 2)
fps = 2
compose_scene.fps = %fps #24
animation_policy.AnimPolicyWalkForward.speed = 0.5
animation_policy.AnimPolicyWalkForward.fps = %fps
animation_policy.AnimPolicyWalkForward.transect_multiple = 5
animation_policy.AnimPolicyWalkForward.turn_frames = 4


full/render_image.passes_to_save = []

compose_scene.urchin_chance = 1.0
compose_scene.urchinkina_chance = 0.0
compose_scene.fish_school_chance = 0.0
compose_scene.colourboard_chance = 1.0
compose_scene.seaweed_chance = 0.0
compose_scene.lichen_chance = 1.0
compose_scene.kelp_chance = 0.0
compose_scene.corals_chance = 0.0
compose_scene.seashell_chance = 0.0
compose_scene.scolymia_chance = 0.0
compose_scene.jellyfish_chance = 0.0
compose_scene.marine_snow_particles_chance = 0.0


compose_scene.monocots_chance = 0.0
compose_scene.mushroom_chance = 0.0
compose_scene.pinecone_chance = 0.0
compose_scene.pine_needle_chance = 0.0
compose_scene.boulders_chance = 0.0
compose_scene.glowing_rocks_chance = 0.00
compose_scene.ground_leaves_chance = 0.00
compose_scene.ground_twigs_chance = 0.00
compose_scene.chopped_trees_chance = 0.0
compose_scene.grass_chance = 0.00


compose_scene.lighting_enabled = True
nishita_lighting.strength = 0.0


camera.camera_pose_proposal.altitude = ("clip_gaussian", 2.2, .1, 1.8, 2.3)
camera.camera_pose_proposal.pitch = ("clip_gaussian", 0, 5, -5, 5)
camera.camera_pose_proposal.headspace_retries = 5

camera.configure_camera_lights.energy = 140


compose_scene.caustics_chance = 0.0

water.geo.water_detail = 0
water.geo.water_height = ("uniform", 0.05, 0.15)
water.geo.with_ripples = 0
water.geo.with_waves=False
#Absorption
water.shader.volume_density = ("clip_gaussian", 1.0, 0.5, 0.3, 1.4)
water.shader.color = ("color_category", 'seawater')
#Scattering
water.shader.scatter_color = ("color_category", 'seawater_scatter')
water.shader.anisotropy = ("clip_gaussian", -0.3, 0.1, -.4, .5)
water.shader.scatter_density=("clip_gaussian", 0.05, 0.02, 0, 0.1)
water.shader.colored = 1 #True
water.shader.emissive_foam = 0
water.is_ocean = False

compose_scene.turbulence_chance = 0.0
turbulence_effector.strength = ("uniform", 0, 7)
turbulence_effector.size = ("uniform", 1.5, 4.5)
turbulence_effector.flow = 1
turbulence_effector.noise = 10

# scene composition config
LandTiles.tile_heights = [-20]
Ground.height = -20

multi_mountains_params.height = ("uniform", 3, 2)

